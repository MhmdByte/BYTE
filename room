import socket
import threading
import select
import time


SOCKS_VERSION = 5

preventlag = False
st = False
serversocket = None
clientsocket =None
returntoroom = False
def restartsocket(cli,lg):
    serversocket.close()
    clientsocket.close()
    cli.send(lg)

def lagroom(cli,lg):
    global st 
    global preventlag
    for i in range(55555555):
        cli.send(b'\x0e\x15\x00\x00\x00\x10\x02\x92L\xf4)[\xa9xk^\xca\xf6\x8a\x80~w')
        print(f"send inv {i}")
        for i in range(1):
            time.sleep(0.01)
            for d in range(1):
                cli.send(lg)
        if st == True:
            st =False
            preventlag = False
            break
            

class Proxy:
 
    def __init__(self):
        self.username = "username"
        self.password = "username"
        self.packet = b''
        self.sendmode = 'client-0-' 

    def handle_client(self, connection):

        version, nmethods = connection.recv(2)

        methods = self.get_available_methods(nmethods, connection)

        if 2 not in set(methods):

            connection.close()
            return

        connection.sendall(bytes([SOCKS_VERSION, 2]))

        if not self.verify_credentials(connection):
            return

        version, cmd, _, address_type = connection.recv(4)
        

        if address_type == 1:
            address = socket.inet_ntoa(connection.recv(4))
        elif address_type == 3:
            domain_length = connection.recv(1)[0]
            address = connection.recv(domain_length)
            address = socket.gethostbyname(address)
            name= socket.gethostname()
            print(name)


        port = int.from_bytes(connection.recv(2), 'big', signed=False)
        port2 = port
        try:
            if cmd == 1:
                remote = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                remote.connect((address, port))
                bind_address = remote.getsockname()
            else:
                connection.close()

            addr = int.from_bytes(socket.inet_aton(
                bind_address[0]), 'big', signed=False)
            port = bind_address[1]

            reply = b''.join([
                SOCKS_VERSION.to_bytes(1, 'big'),
                int(0).to_bytes(1, 'big'),
                int(0).to_bytes(1, 'big'),
                int(1).to_bytes(1, 'big'),
                addr.to_bytes(4, 'big'),
                port.to_bytes(2, 'big')

            ])
        except Exception as e:

            reply = self.generate_failed_reply(address_type, 5)

        connection.sendall(reply)

        if reply[1] == 0 and cmd == 1:
            self.botdev(connection, remote, address, port2)
        connection.close()

    def generate_failed_reply(self, address_type, error_number):
        return b''.join([
            SOCKS_VERSION.to_bytes(1, 'big'),
            error_number.to_bytes(1, 'big'),
            int(0).to_bytes(1, 'big'),
            address_type.to_bytes(1, 'big'),
            int(0).to_bytes(4, 'big'),
            int(0).to_bytes(4, 'big')
        ])

    def verify_credentials(self, connection):
        version = ord(connection.recv(1))


        username_len = ord(connection.recv(1))
        username = connection.recv(username_len).decode('utf-8')

        password_len = ord(connection.recv(1))
        password = connection.recv(password_len).decode('utf-8')

        if username == self.username and password == self.password:

            response = bytes([version, 0])
            connection.sendall(response)
 
            return True
            

        response = bytes([version, 0xFF])
        connection.sendall(response)
        connection.close()
        return False

    def get_available_methods(self, nmethods, connection):
        methods = []
        for i in range(nmethods):
            methods.append(ord(connection.recv(1)))
        return methods

    def run(self, host, port):
        var = 0 
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.bind((host, port))
        s.listen()
        print(" [ free fire proxy  ] [ your ip {} ] [ the port {} ]".format(host, port))

        while True:
            conn, addr = s.accept()
            running = False
            t = threading.Thread(target=self.handle_client, args=(conn,))
            t.start()
    def botdev(self, client, remote, address, port):
        
        
        while True:
            try:
                r, w, e = select.select([client, remote], [], [])
                if client in r or remote in r:
                    global preventlag
                    global st
                    global serversocket 
                    global clientsocket
                    global returntoroom

                    if client in r:
                        dataC = client.recv(999999)
                        if remote.send(dataC) <= 0:
                            break
                    if remote in r:
                        global lag
                        global clieee
                        global team
                        global packett
                        global packett1
                        try:
                            dataS = remote.recv(999999)
                        except :
                            pass
                        if preventlag ==True and '0e00' in dataS.hex()[:4]:
                            print("just print word preventlag and no lag will be formed ")
                        else:

                            try:
                                try:
                                    if '0e15' in dataC.hex()[:4] and returntoroom ==True:
                                        remote.send(lag)
                                        returntoroom =False
                                        
                                except:
                                    pass
                                try:

                                    if '0e15' in dataC.hex()[:4]:
                                        serversocket = remote
                                        clientsocket = client
                                except:
                                    pass
                                try:

                                    if '0e15' in dataC.hex()[0:4] and 80 < len(dataC.hex()) < 190:
                                        print(dataC)
                                        print(len(dataC.hex()))
                                        clieee = remote
                                        lag = dataC
                                        
                                except Exception as c:
                                    print(c)
                                
                                try:
                                    if '1200' in dataS.hex()[:4] and b'/lag' in dataS:
                                        
                                        import time
                                        import os
                                        preventlag =True
                                        print('break')
                                        byte = threading.Thread(target=lagroom,args=(clieee,lag))
                                        byte.start()
                                except Exception as c:
                                    print(c)
                            except:
                                pass    
                                print("Error in Connection >!")    
                            try:
                                if '1200' in dataS.hex()[:4] and b'/stop' in dataS: 
                                    st = True
                                    preventlag = False 
                                    returntoroom = True
                                    threading.Thread(target=restartsocket,args=(clieee,lag)).start()
                            except:
                                pass

                            if client.send(dataS) <= 0:
                                break
            except:
                pass                      
ip = socket.gethostbyname(socket.gethostname())                    
Proxy().run(ip,1080)
